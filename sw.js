L.Map.include({
    _getNewPixelBounds: function(center, zoom) {
        center = center || this.getCenter();
        zoom = zoom || this.getZoom();
        if (!this._rotate && this.options.mapProto && this.options.mapProto._getNewPixelBounds) {
            return this.options.mapProto._getNewPixelBounds.apply(this, arguments);
        }
        var mapZoom = this._animatingZoom ? Math.max(this._animateToZoom, this.getZoom()) : this.getZoom(),
            scale = this.getZoomScale(mapZoom, zoom),
            pixelCenter = this.project(center, zoom).floor(),
            size = this.getSize(),
            padding = this.options.padding || [0, 0],
            halfSize = new L.Bounds([
                this.containerPointToLayerPoint([0, 0]).floor(),
                this.containerPointToLayerPoint([size.x, 0]).floor(),
                this.containerPointToLayerPoint([0, size.y]).floor(),
                this.containerPointToLayerPoint([size.x, size.y]).floor()
            ]).getSize().divideBy(scale * 2),
            expandFactor = 3.1; // –£–≤–µ–ª–∏—á–µ–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º halfSize —Å —É—á—ë—Ç–æ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ padding
        halfSize = halfSize.multiplyBy(expandFactor).add(new L.Point(padding[0], padding[1]).divideBy(scale * expandFactor));

       // console.log('HalfSize:', halfSize, 'PixelCenter:', pixelCenter, 'Scale:', scale); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

        return new L.Bounds(pixelCenter.subtract(halfSize), pixelCenter.add(halfSize));
    }
});


          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å –≤—Ä–∞—â–µ–Ω–∏–µ–º
        const map = L.map('map', {
            rotate: true,
            rotateControl: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª –≤—Ä–∞—â–µ–Ω–∏—è
           // padding: 4.0, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π–ª–æ–≤
            center: [49.084295954105094, 33.42003302328799], // –ù–∞—á–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä (–±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω)
            zoom: 16,
            minZoom: 0,
            maxZoom: 18,
            scrollWheelZoom: true, // –ó—É–º –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏
            touchZoom: true, // –ó—É–º –ø–∞–ª—å—Ü–∞–º–∏
            dragging: true // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
        });



        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–ª–æ–≤—ã–π —Å–ª–æ–π —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º padding
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            noWrap:false,
            //keepbufe:5,
            //padding: 4, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π–ª–æ–≤
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);




// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ –≤—Ä–∞—â–µ–Ω–∏—è
let userLocation = L.latLng([49.084295954105094, 33.42003302328799]);
let userMarker = null;
let lastPosition = null;
let currentBearing = 0;
let targetBearing = 0;
const rotationSpeed = 0.05; // –£–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
const minSpeed = 1.0; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è (–º/—Å)
const minDistance = 15; // –£–≤–µ–ª–∏—á–∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è (–º–µ—Ç—Ä—ã)
const headingHistory = []; // –ò—Å—Ç–æ—Ä–∏—è –∑–Ω–∞—á–µ–Ω–∏–π heading –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
const maxHistoryLength = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
const minHeadingChange = 10; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É–≥–ª–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è targetBearing (–≥—Ä–∞–¥—É—Å—ã)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (–≤ –º–µ—Ç—Ä–∞—Ö)
function calculateDistance(from, to) {
    const R = 6371000;
    const lat1 = (from.lat * Math.PI) / 180;
    const lat2 = (to.lat * Math.PI) / 180;
    const dLat = ((to.lat - from.lat) * Math.PI) / 180;
    const dLon = ((to.lng - from.lng) * Math.PI) / 180;

    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
              Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
function calculateBearing(from, to) {
    const lat1 = (from.lat * Math.PI) / 180;
    const lon1 = (from.lng * Math.PI) / 180;
    const lat2 = (to.lat * Math.PI) / 180;
    const lon2 = (to.lng * Math.PI) / 180;

    const dLon = lon2 - lon1;
    const y = Math.sin(dLon) * Math.cos(lat2);
    const x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(dLon);
    let bearing = Math.atan2(y, x) * (180 / Math.PI);
    bearing = (bearing + 360) % 360;
    return bearing;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
function averageHeading(history) {
    let sum = 0;
    history.forEach(h => sum += h);
    return sum / history.length;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–Ω–∏—Ü—ã —É–≥–ª–æ–≤ (–∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å)
function normalizeAngleDiff(diff) {
    while (diff > 180) diff -= 360;
    while (diff < -180) diff += 360;
    return diff;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function updateUserLocation(position) {
    const lat = position.coords.latitude;
    const lng = position.coords.longitude;
    userLocation = L.latLng([lat, lng]);

    if (!userMarker) {
        userMarker = L.circleMarker(userLocation, {
            radius: 8,
            color: 'blue',
            fillColor: 'blue',
            fillOpacity: 0.8
        }).addTo(map).bindPopup("–¢–∏ —Ç—É—Ç üë§");
    } else {
        userMarker.setLatLng(userLocation);
    }

    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–º–ø–∞—Å: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º position.coords.heading
    let shouldRotate = false;
    let heading = null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if (position.coords.speed != null && position.coords.speed >= minSpeed) {
        shouldRotate = true;
    }

    // –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    if (lastPosition && !shouldRotate) {
        const distance = calculateDistance(lastPosition, userLocation);
        if (distance >= minDistance) {
            shouldRotate = true;
        }
    }

    if (shouldRotate && lastPosition) {
        heading = calculateBearing(lastPosition, userLocation);
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ —É—Å—Ä–µ–¥–Ω—è–µ–º
        headingHistory.push(heading);
        if (headingHistory.length > maxHistoryLength) {
            headingHistory.shift();
        }
        const averagedHeading = averageHeading(headingHistory);
        const newTarget = -averagedHeading;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É–≥–ª–∞
        const angleDiff = Math.abs(newTarget - targetBearing);
        if (angleDiff >= minHeadingChange) {
            targetBearing = newTarget;
        }
    }

    // –ï—Å–ª–∏ –Ω–µ–ø–æ–¥–≤–∏–∂–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —É–≥–æ–ª
    if (!shouldRotate) {
        targetBearing = currentBearing;
    }

    lastPosition = userLocation;

    // –§–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω–∏–∑—É –ø–æ —Ü–µ–Ω—Ç—Ä—É
    map.setView(userLocation, map.getZoom(), { animate: false });
}

// –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è –∫–∞—Ä—Ç—ã —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
function animateRotation() {
    let diff = targetBearing - currentBearing;
    diff = normalizeAngleDiff(diff);
    currentBearing += diff * rotationSpeed;
    currentBearing = (currentBearing + 360) % 360; // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É–≥–ª–∞
    map.setBearing(currentBearing);
    requestAnimationFrame(animateRotation);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è moveend –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let fixing = false;
map.on('moveend', function () {
    if (fixing) return;

    fixing = true;
    map.setView(userLocation, map.getZoom(), { animate: false });
    fixing = false;

   // console.log(map.getCenter());
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ñ–∏–∫—Å–∞—Ü–∏—é –∏ –∞–Ω–∏–º–∞—Ü–∏—é
setTimeout(function () {
    map.setView(userLocation, map.getZoom(), { animate: false });
    requestAnimationFrame(animateRotation);
}, 100);

// --- –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è ---
if (navigator.geolocation) {
    navigator.geolocation.watchPosition(updateUserLocation, (err) => {
        console.warn("–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞:", err.message);
        alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–æ—á–∞—Ç–∫–æ–≤–∞ —Ç–æ—á–∫–∞.");
        map.setView(userLocation, map.getZoom(), { animate: false });
    }, {
        enableHighAccuracy: true,
        maximumAge: 5000,
        timeout: 10000
    });
} else {
    alert("–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ —Ü—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ.");
    map.setView(userLocation, map.getZoom(), { animate: false });
}


let lights = []; // –º–∞—Å–∏–≤ —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä—ñ–≤, –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è –∑ JSON

// –§—É–Ω–∫—Ü—ñ—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ–∞–∑–∏ —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä–∞
function getLightPhase(currentMs, light) {
  const elapsedMs = currentMs - light._startUnixMs;
  if (elapsedMs < 0) {
    return { color: "off", remainingMs: -elapsedMs };
  }

  const { green, yellow, red } = light.phases;
  const totalCycleMs = (green + yellow + red) * 1000;
  const tMs = elapsedMs % totalCycleMs;

  if (tMs < green * 1000) {
    return { color: "green", remainingMs: green * 1000 - tMs };
  }
  if (tMs < (green + yellow) * 1000) {
    return { color: "yellow", remainingMs: (green + yellow) * 1000 - tMs };
  }
  return { color: "red", remainingMs: totalCycleMs - tMs };
}



// –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É —Ç–∞ —á–∞—Å —Å—Ç–∞—Ä—Ç—É, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å Unix –º—Å –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É —Å—Ç–∞—Ä—Ç—É + –¥–æ–±–æ–≤—ñ –∑—Å—É–≤–∏ 
function parseStartTime(dateTimeStr, light) {
  const baseDate = new Date(dateTimeStr);
  const now = new Date();

   // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ + —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è
  const todayStart = new Date(
    now.getFullYear(),
    now.getMonth(),
    now.getDate(),
    baseDate.getHours(),
    baseDate.getMinutes(),
    baseDate.getSeconds(),
    baseDate.getMilliseconds()
  );

  // –°–∫–æ–ª—å–∫–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å—É—Ç–æ–∫ –ø—Ä–æ—à–ª–æ (–±–µ–∑ —É—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏)
  const baseDateOnly = new Date(baseDate.getFullYear(), baseDate.getMonth(), baseDate.getDate());
  const nowDateOnly = new Date(now.getFullYear(), now.getMonth(), now.getDate());

  const daysPassed = Math.floor((nowDateOnly - baseDateOnly) / 86400000);

  // –°–¥–≤–∏–≥ –≤ –º—Å: –∫–∞–∂–¥—ã–µ —Å—É—Ç–∫–∏ + –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–¥–≤–∏–≥
  const dailyOffsetMs = daysPassed * light.dailyStartOffset  * 1000;

  return todayStart.getTime() + dailyOffsetMs;
}




// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ä–∫–µ—Ä–∞ —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç—ñ
function createLightMarker(light) {
  const div = document.createElement('div');
  div.className = 'traffic-light';
  const marker = L.marker(light.coords, {
    icon: L.divIcon({
      className: 'custom-icon',
      html: div.outerHTML
    })
  }).addTo(map);
  light._marker = marker;
  light._startUnixMs = parseStartTime(light.startDateTime, light);
}









// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä—ñ–≤ –Ω–∞ –∫–∞—Ä—Ç—ñ ()
function updateLights() {
    const nowMs = Date.now();
    lights.forEach(light => {
      const { color, remainingMs } = getLightPhase(nowMs, light);

      let htmlContent;
      if (color === 'off') {
        htmlContent = `<div class="traffic-light" style="background:gray">
          <div class="timer">–°—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ ${(remainingMs / 1000).toFixed(1)}s</div>
        </div>`;
      } else {
        htmlContent = `
        <div class="traffic-light" style="background:black">
            ${light.description || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
          <div class="timer" style="color:${color}">
            ${Math.ceil(remainingMs / 1000)}s
          </div>
        </div>`;
      }

      light._marker.setIcon(L.divIcon({
        className: 'custom-icon',
        html: htmlContent
      }));
    });
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä—ñ–≤ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
/*function loopLights() {
  updateLights();
  setInterval(loopLights, 100);
}
*/

// 1 —Ñ—É–Ω–∫—Ü–∏—è - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è! –í—ã–∑—ã–≤–∞—é—Ç—Å—è —Ñ-–∏–∏ createLightMarker –∏ –≤ –Ω–∏—Ö –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –æ–±—ä–µ–∫—Ç—ã —Å–≤–µ—Ç
function initializeLights() {
  lights.forEach(createLightMarker);
  updateLights(); // –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ —Å—Ä–∞–∑—É
  setInterval(updateLights, 100);   // –¥–∞–ª—å—à–µ ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å —Å–µ–∫—É–Ω–¥–∞–º–∏
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä—ñ–≤ –∑ JSON
fetch('lights.json')
  .then(response => {
    if (!response.ok) throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ lights.json');
    return response.json();
  })
  .then(data => {
    lights = data;
    initializeLights();
  })
  .catch(err => console.error(err));

/*// --- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞ –∫–∞—Ä—Ç—ñ ---
let userMarker = null;

function updateUserLocation(position) {
  const lat = position.coords.latitude;
  const lng = position.coords.longitude;

  if (!userMarker) {
    userMarker = L.circleMarker([lat, lng], {
      radius: 8,
      color: 'blue',
      fillColor: 'blue',
      fillOpacity: 0.8
    }).addTo(map).bindPopup("–¢–∏ —Ç—É—Ç üë§");
  } else {
    userMarker.setLatLng([lat, lng]);
  }
}

if (navigator.geolocation) {
  navigator.geolocation.watchPosition(updateUserLocation, (err) => {
    console.warn("–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞:", err.message);
  }, {
    enableHighAccuracy: true,
    maximumAge: 5000,
    timeout: 10000
  });
} else {
  alert("–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ —Ü—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ.");
}*/
